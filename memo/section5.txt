58. express.js란?
바디를 추출하기 위해 직접 이벤트 엔드 이벤트 문자열로 변환 버퍼 생성 
파싱을 대신해 주기 위한 프로젝트ㅡ 내부에 다른 패키지를 쉽게 설치하도록 도와줌
애플리케이션을 정의하는 코드 고유의 장점에 집중
무거운 작업 -> 프레임워크로 처리
프레임워크 : 일련의 도움 모음

<Express.js 대안>
Vanilla Node.js
Adonis.js PHP Laravel 형 프레임워크
Koa
Sails.js

express 장점
유연함
높은 확장성
새로 구성할 필요 없이 쉽게 Node Express 애플리케이션에 추가 가능

59. Express.js 설치


<routes.js>
const http = require('http');
const fs = require('fs');

const requestHandler = (req, res) => {
    const url = req.url;
    const method = req.method;
    if (url === '/') {
        res.write('<html>');
        res.write('<head><title>Enter Message</title><head>');
        res.write(
          '<body><form action="/message" method="POST"><input type="text" name="message"><button type="submit">Send</button></form></body>'
        );
        res.write('</html>');
        return res.end();
      }
      if (url === '/message' && method === 'POST') {
        const body = [];
        req.on('data', chunk => {
          console.log(chunk);
          body.push(chunk);
        });
        return req.on('end', () => {
          const parsedBody = Buffer.concat(body).toString();
          const message = parsedBody.split('=')[1];
          // 파일에 메시지를 저장한 후에는 루트 URL로 리다이렉션
          // 즉  URL인 /로 감
          fs.writeFile('message.txt', message, err => {
            res.statusCode = 302;
            res.setHeader('Location', '/');
            return res.end();
          });
        });
    }
    
    res.setHeader('Content-Type', 'text/html');
    res.write('<html>');
    res.write('<head><title>My First Page</title><head>');
    res.write('<body><h1>Hello from my Node.js Server!</h1></body>');
    res.write('</html>');
    res.end();
};

module.exports = requestHandler;

// 만약 여러개를 내보내기 할 때
// 첫번째방법
// module.exports = {
//   handler: requestHandler,
//   someText: 'Some hard coded text';
// }
// app.js에서 routes.handler routes.someText로 접근

// 두번째 방법
// module.exports.handler = requestHandler;
// module.exports.someText = 'Some hard coded text';
// exports 생략 가능 그러면 javascript가 아닌 Node.js에서 처리함

npm install --save express
const express = require('express');


60. 미들웨어 추가
app.use((req, res, next) => {
    console.log('In the middleware!');
    next(); //다음 라인에 있는 미들웨어 이동
});


62. Express.js 백그라운드 확인
// const server = http.createServer(app);
// server.listen(3000);
// 두개를 더 짧게 가능
app.listen(3000);
// const http = require('http');
-> 얘도 없어도 됨


63. 다른 라우트 사용법
next()는 자제하기
기본
app.use('/', (req, res, next) => {
    console.log('This always runs!');
    next();
});

64. 수신 요청 분석
npm install --save body-parser

65. POST 요청으로 미들웨어 실행 제한
app.get
app.post

66. Express 라우터 사용
다양한 경로와 http 메서드에 대해 실행할 라우팅 관련 코드를 파일에 담아서 routes 폴더에 저장

const router = express.Router()
-> 실행하게 될 함수
이 라우터는 다른 Express 앱에 연결되어 있거나 꽂아 넣을 수 있는 Express 앱과 같음
export 할 수 있음

router의 장점
유효한 미들웨어 함수	

router.use
-> 어디서든 작동하기 때문에 어디서 오류났는지 모름 그래서 순서 잘 봐야함

67. 404페이지 만들기
app.use((req, res, next) => {
    res.status(404).send('<h1>Page not Found</h1>')
})

68. 경로 필터링
app.js 에서
app.use('/admin',adminRoutes);
하면 JPA 어노테이션의 requestMapping이랑 똑같음

70. HTML 페이지 서비스 하기
const path = require('path');
router.get('/', (req, res, next) => {
    console.log('In another middleware!');
    res.sendFile(path.join(__dirname, '../', 'views', 'shop.html'));
});

path.join(__dirname)
-> 절대 경로를  이 프로젝트 폴더로 고정해 주는 전역 변수
path 는 실행중인 운영체제를 감지해서 자동으로 올바른 경로를 생성함
__dirname 는 자신이 사용된 파일의 경로