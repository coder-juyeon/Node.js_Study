<Node.js를 효율적으로 작성하는 방법>

42. NPM 스크립트의 이해
npm init
-> package.json 파일 만듦
npm start
-> 어느 파일이 서버 진입파일인지 일일이 파악하지 않고 npm start만 해주면 됨
npm run (scripts이름)
"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start-server": "node app.js"
  }
-> start-server와 같이 개별 설정한 이름인 경우



43.제 3자 패키지 설치하기
패키지: 1.개발패키지 2. 프로덕션 의존성패키지 로 나뉨
자동재시작 (라이브 서버)
npm install nodemon
-> 개발패키지
npm install nodemon --save-dev
-> --save: 패키지가 프로덕션 의존성을 설치
-> -dev 개발 도중 사용하는 것을 의미
npm install nodemon -g 
-> 머신 전체에 설치하여 어디든지 사용가능
npm install
-> package.json에 언급된 모든 패키지를 검색해서 자동으로 최신버전을 설치



44. 전역기능 vs 코어 모듈 vs 제3자모듈
전역 기능: const나 function 같은 키워드 및 process 등의 전역 객체
	항상 사용 가능.
	임포트 필요 X

코어 Node.js 모듈: 파일 시스템 모듈 ("fs"), 경로 모듈 ("path"), Http 모듈 ("http") 등
		설치 필요 X
		임포트 필요 O

제3자 모듈: npm install을 통해 어떤 종류의 기능도 설치 가능



45. 자동 재시작을 위한 Nodemon 사용

start에 nodemon app.js
해주면 npm start 하면 수정하고 저장할때마다 바로바로 반영이 되서 알아서 자동으로 서버 재시작해줌

47. 다양한 오류 유형 이해
Syntax Errors : 구문오류 실행하면 오류 남
Runtime Errors : 런타임오류 실행하면 오류 안나지만 웹페이지에서 오류남
logical Errors

50. 논리 오류
Node.js의 debugger 디버거
환경: node.js로 설정

52. 앱 편집 후 자동으로 디버거 재시작하기
실행 - 구성추가 node.js
            "restart": true,
            "runtimeExecutable": "nodemon",
            "console": "integratedTerminal"

전역 npm 깔기
npm install nodemon -g

54. 디버그 콘솔에서 변수 변경